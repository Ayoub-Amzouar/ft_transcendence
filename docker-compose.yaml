#! run with : docker compose --env-file .env up 
version: "3.9" 

services:

#nestjs backend
  backend:
  # build from Dockerfile
    build:
      dockerfile: Dockerfile
      #simply the backend folder chat
      context: ./backend
      # only build the dev stage from Dockerfile
      target: dev
    # Mount our host dir to the docker container
    # Mount chat directory (./chat) to (:) docker container (/usr/src/app)
    # Reflect File changes from host to container
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node-modules
    # RUN in debug mode: npm run start:debug --> Also start your vscode debugger
    # RUN in dev mode: npm run start:dev
    command: npm run start:dev
    env_file: .
    
    depends_on: 
      - postgres
    environment:
      DATABASE_URL: "${DATABASE_URL}"
      NODE_ENV: dev
      PORT: 3000
    ports:
      - 3000:3000
      - 9229:9229

  frontend:
    build:
      dockerfile: Dockerfile
      context: ./frontend
      target: dev
    command: npm run serve
    env_file: .env
    volumes:
      - ./frontend:/usr/frontend/src/app
      - /usr/frontend/src/app/node-modules
    ports:
      - 8080:8080
    # link to chat backend 
    links:
      - backend

  postgres:
    #use postgres image from dockerhub
    image: postgres:14.4
    env_file: .env
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DATABASE}"
    ports:
      - 5432:5432

  postgres_admin:
    image: dpage/pgadmin4:6.11
    env_file: .env
    depends_on: 
      - postgres
    environment:
      PGADMIN_DEFAULT_EMAIL: "${PGADMIN_DEFAULT_EMAIL}"
      PGADMIN_DEFAULT_PASSWORD: "${PGADMIN_DEFAULT_PASSWORD}"
    ports:
      - 5050:80